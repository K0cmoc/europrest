<?php

namespace tests\unit;

use app\models\Category;
use app\modules\api\forms\category\OptionAddForm;
use Codeception\Specify;
use Codeception\Test\Unit;

class OptionAddFormTest extends Unit
{
    use Specify;

    /**
     * @var \UnitTester
     */
    protected $tester;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testSuccessLoadData()
    {
        $this->specify('It should success load data', function () {
            $data = [
                'categoryId' => rand(1, null),
                'name' => \Yii::$app->security->generateRandomString()
            ];

            $optionAddForm = new OptionAddForm();
            $optionAddForm->load($data);
            verify($optionAddForm->categoryId)->equals($data['categoryId']);
            verify($optionAddForm->name)->equals($data['name']);
        });
    }

    public function testSuccessValidate()
    {
        $this->specify('It should success validate new data', function () {
            $categoryId = $this->tester->haveRecord(Category::class, [
               'name' => \Yii::$app->security->generateRandomString(),
            ]);
            $data = [
                'categoryId' => $categoryId,
                'name' => \Yii::$app->security->generateRandomString()
            ];

            $optionAddForm = new OptionAddForm();
            $optionAddForm->load($data);

            verify($optionAddForm->validate())->equals(true);
            verify($optionAddForm->getFirstErrors())->equals([]);
        });
    }

    public function testValidationRequiredErrors()
    {
        $this->specify('It should have validation errors on required fields', function () {
            $data = [
                'categoryId' => null,
                'name' => ''
            ];

            $optionAddForm = new OptionAddForm();
            $optionAddForm->load($data);

            verify($optionAddForm->validate())->equals(false);
            verify(array_keys($optionAddForm->getFirstErrors()))->equals(['categoryId', 'name']);
        });
    }
}